{"version":3,"file":"background.js","mappingssources":["webpack://keploy-plugin/./src/background/index.js"],"sourcesContent":["/* eslint-disable no-empty */\n/* eslint-disable no-unused-vars */\n\n// import browser from 'webextension-polyfill'\n// import UAParser from 'ua-parser-js'\n\n// const parser = new UAParser(window.navigator.userAgent)\n// const browserName = parser.getBrowser().name\n// const isChrome = browserName === 'Chrome'\n// const isFirefox = browserName === 'Firefox'\n\nfunction getId() {\n  return 'mooikfkahbdckldjjndioackbalphokd'\n  // if (process.env.SIDE_ID) return process.env.SIDE_ID\n  // return isChrome\n    // ? 'mooikfkahbdckldjjndioackbalphokd'\n    // : isFirefox\n    // ? '{a6fd85ed-e919-4a43-a5af-8da18bda539f}'\n    // : ''\n}\n\nconst sideId = getId()\n\nfunction startPolling(payload) {\n  setInterval(() => {\n    chrome.runtime.sendMessage(sideId, {\n        uri: '/health',\n        verb: 'get',\n      }).catch(res => ({ error: res.message }))\n      .then(res => {\n        if (!res) {\n          chrome.runtime.sendMessage(sideId, {\n            uri: '/register',\n            verb: 'post',\n            payload,\n          })\n        }\n      })\n  }, 1000)\n}\n\nstartPolling({\n  name: \"Selenium IDE plugin\",\n  version: \"1.0.0\",\n  commands: [\n    {\n      id: \"open\",\n      name: \"open\"\n    },\n    {\n      id: \"infraRecordingClose\",\n      name: \"Infra Recording Close\"\n    }\n  ]\n})\n\nvar appid = \"\"\n\nchrome.scripting.getRegisteredContentScripts(\n  {ids: [\"1\"]}, (scripts) => {\n    if(scripts != null || scripts.length == 0){\n      chrome.scripting.registerContentScripts(\n        [{\n            world: \"MAIN\", \n            id: \"1\", \n            js: [ `kscript.js`], \n            runAt: \"document_start\",\n            allFrames: true,\n            matches: [\"<all_urls>\"]\n        }],\n      )        \n    }\n  }\n)\n\nchrome.runtime.onMessageExternal.addListener(async (message, sender, sendResponse) => {\n  console.log(\"event triggered\", message)\n\n  if (message.action === \"execute\") {\n    console.log(\"execute the following command: \", message.command.command)\n    switch (message.command.command) {\n      case \"open\":\n        // console.log(\"called open\")\n        // setTimeout(() => {\n        //   console.log(\"ended open command\")\n          sendResponse(true);\n        // }, 3000)\n        break;\n      case \"infraRecordingClose\":\n        sendResponse(true);\n        break;\n      case \"close\":\n        break;\n    }\n    // sendResponse(false);\n  }\n  else {\n\n    // stop selenium recording before closing the rescording tab\n    if(message.event===\"recordingStopped\"){\n      console.log(\"removed listener\")\n      chrome.storage.sync.get(['tabid'], function(d) {\n        console.log(\"infraRecordingClose: \", d)\n        chrome.tabs.sendMessage(d.tabid, {event: \"infraRecordingClose\"}, (resp) => {\n          if(!chrome.runtime.lastError && resp) {\n            console.log(\"infraRecordingClose sendMessage returned: \", resp)\n            chrome.storage.sync.remove('tabid')\n          } else {\n            console.log(chrome.runtime.lastError)\n          }\n        })\n      })\n    }\n    else if (message.event===\"projectLoaded\"){\n      appid = message.options.projectName\n      chrome.storage.sync.set({\"appid\": appid}, function() {});\n    }\n    else if(message.event===\"playbackStarted\"){\n      console.log(\"into playback background\")\n      chrome.tabs.onUpdated.addListener(\n        tabListener\n      )\n  \n    }\n    else if(message.event===\"playbackStopped\"){\n      chrome.storage.sync.get(['tabid'], function(d) {\n        console.log(\"playbackStopped: \", d)\n        chrome.tabs.sendMessage(d.tabid, {event: message.event, testName: message.options.testName, appid: d.appid, tabId: d.tabid}, (resp) => {\n          if(!chrome.runtime.lastError && resp) {\n            console.log(\"playbackStopped sendMessage returned: \", resp)\n            chrome.storage.sync.remove('tabid')\n          } else {\n            console.log(chrome.runtime.lastError)\n          }\n        })\n      })\n    }\n    else if(message.event !== \"commandRecorded\"){\n      chrome.tabs.onUpdated.addListener(\n        tabListener\n      )\n    }\n  \n    \n    sendResponse(true);\n  }\n  function tabListener(tabId, changeInfo, tab) {\n    if(\n      tab.active === true\n    ){\n      console.log(tab)\n      chrome.storage.sync.get([\"appid\"], function(d) {\n        chrome.storage.sync.set({ \"tabid\": tabId, ...d}, function(){})\n        appid = d.appid\n        console.log(\"started: \", d, \" \", appid)\n        let data = {\n          testName: message.options.testName, \n          event: message.event,\n          appid: appid,\n          tabId: tabId\n        }\n        if(message.event == \"playbackStarted\"){\n\n          chrome.scripting.executeScript(\n            {\n              target: {tabId},\n              world: \"MAIN\",\n              func: function(appid, testName, tabid){\n                let fetched = false\n                const requestDeps = new XMLHttpRequest()\n                requestDeps.open('GET', `http://localhost:8081/api/regression/selenium/get?appid=` + appid + `&testName=` + testName, false)\n                requestDeps.send(null)\n                if(requestDeps.status == 200 && sessionStorage.getItem(\"depArr\")==null){\n                    const docs = JSON.parse( requestDeps.responseText )\n                    // console.log(\"** ** \",requestDeps.responseText)\n                    sessionStorage.setItem(\"depArr\", JSON.stringify(docs[0].deps))\n                    var dataObj = {\"event\":\"playbackStarted\", \"testName\":testName, \"appid\": appid, \"tabId\": tabid};\n                    let storeEvent = new CustomEvent('eventMode', {\"detail\":dataObj});\n                    document.dispatchEvent(storeEvent);\n                }\n                // fetch(`http://localhost:8081/api/regression/selenium/get?appid=` + appid + `&testName=` + testName)\n                //     .then((response) => response.json())\n                //     .then((data) => {\n                //     console.log(\"fetched data: \", data);\n                //     fetched = true\n                //     if (data.length == 1 && sessionStorage.getItem(\"depArr\")==null) {\n                //         sessionStorage.setItem(\"depArr\", JSON.stringify(data[0].deps));\n                //         var dataObj = {\"event\":\"playbackStarted\", \"testName\":testName, \"appid\": appid, \"tabId\": tabid};\n                //         let storeEvent = new CustomEvent('eventMode', {\"detail\":dataObj});\n                //         document.dispatchEvent(storeEvent);\n                //         // chrome.tabs.onUpdated.removeListener(tabListener)\n                //         // return sendResponse(true);\n                //         return true\n                //     }\n                // });\n              },\n              args: [appid, message.options.testName, tabId],\n              injectImmediately: true,\n            },\n            function(results){\n              console.log(results)\n              if(results != undefined){\n                chrome.tabs.onUpdated.removeListener(tabListener)\n              }\n              // chrome.tabs.sendMessage(tabId, data, (resp) => {\n              //   if(!chrome.runtime.lastError && resp) {\n              //     console.log(resp)\n              //     chrome.tabs.onUpdated.removeListener(tabListener)\n              //   } else {\n              //     console.log(chrome.runtime.lastError)\n              //   }\n              // });\n              // if(result){\n                // chrome.tabs.onUpdated.removeListener(tabListener)\n              // }\n            },\n          )\n        }\n        else {\n          chrome.tabs.sendMessage(tabId, data, (resp) => {\n            if(!chrome.runtime.lastError && resp) {\n              console.log(resp)\n              chrome.tabs.onUpdated.removeListener(tabListener)\n            } else {\n              console.log(chrome.runtime.lastError)\n            }\n          });\n        }\n      });\n\n    }\n  }\n\n});"],"names":[],"sourceRoot":""}